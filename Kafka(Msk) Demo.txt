step 1 : 
	Create a MSK kafka cluster with minimun requirements and select Ireland as AWS Region while creating(low cost)
	1. While creating msk cluster version(version - 2.8.1)
	2. Networking settings- Number of zones : 2, Public access : Off, AWS PrivateLink : Turned off
	3. Brokers- Broker type : kafka.t3.small, Brokers per zone : 1, Total number of brokers : 2
	4. Storage- EBS storage volume per broker : 1 GiB, Cluster storage mode : EBS storage
	5. Security settings- Unauthenticated access : Enabled, IAM role-based authentication : Not enabled, SASL/SCRAM authentication : Not enabled
	6. Encryption- Within the cluster-TLS encryption : Enabled, Between clients and brokers-TLS encryption : Not enabled and Plaintext : Enabled

Step 2 : 
	Copy the Bootstrap servers(Private endpoint (single-VPC))

	Example :
	BS1 : b-1.testcluster.67abc5.a8.kafka.eu-central-1.amazonaws.com:9092
	BS2 : b-2.testcluster.67abc5.a8.kafka.eu-central-1.amazonaws.com:9092

Step 3 : 
	For Client Producer and Cosumer test, create one ec2 instance within same VPC(MSK one)
	
	Install followings on ec2
	1. sudo yum install java-1.8.0-openjdk
	2. wget https://archive.apache.org/dist/kafka/2.8.1/kafka_2.12-2.8.1.tgz
	3. tar -xvf kafka_2.12-2.8.1.tgz
	
	Creating Kafka Topic:
	--------------------------------------
	cd kafka_2.12-2.8.1
	bin/kafka-topics.sh --create --topic {topic_name} --bootstrap-server {Put the MSK bootstrap server URLs here} --replication-factor 1 --partitions 1
	
	Creating Console Producer(Kafka Topic):
	---------------------------------------
	cd kafka_2.12-2.8.1/bin
	/home/ec2-user/kafka_2.13-2.8.1/bin/kafka-console-producer.sh --broker-list {Put the MSK bootstrap server URLs here} --producer.config client.properties --topic {topic_name}
	
	Creating Console Cosumer:
	---------------------------------------
	cd kafka_2.12-2.8.1/bin
	/home/ec2-user/kafka_2.12-2.8.1/bin/kafka-console-consumer.sh --bootstrap-server {Put the MSK bootstrap server URLs here} --consumer.config client.properties --topic {topic_name} --from-beginning
	
Step 4 :
	Create AWS Lambda fucntion for the producer to push messages into kafka
	1. Use same VPC(MSK one) for the lambda
	2. Allow Lambda execution role permissions : AmazonEC2FullAccess, AmazonVPCFullAccess, AWSLambdaBasicExecutionRole, AmazonMSKFullAccess
	3. Use same security group as MSK have, allow all the traffic of ec2 security group and wise versa(ec2 sg allows all trafic of msk sg).
	4. Add Layer to the Lambda for KafkaProducer(this is not inbuilt in python)
	5. Download the kafka_msk_demo.zip file and add into Layers for KafkaProducer
	6. Copy paste the following code into lambda fucntion
		
		--------------- Code -----------------------
		from time import sleep
		from json import dumps
		from kafka import KafkaProducer

		topic_name='msk-test-topic'
		producer = KafkaProducer(bootstrap_servers=['server1','server2'],value_serializer=lambda x: dumps(x).encode('utf-8'),api_version=(2,8,1))

		def lambda_handler(event, context):   
			for e in range(10):
				data = {'number' : e}
				print(data)
				producer.send(topic_name, value=data)
				sleep(1)
				producer.flush()
	
	7. Test the Lambda fucntion with default test and observe the output on kafka Console Cosumer


Code to create the Lambda Layer:
---------------------------------------------------------
	python3 --version  
	sudo apt install python3-pip
	python3 -m pip install --upgrade pip
	mkdir -p lambda_layers/python/lib/python3.8/site-packages
	cd lambda_layers/python/lib/python3.8/site-packages
	pip install  kafka-python -t .
	cd /mnt/c/Users/USER/lambda_layers
	sudo apt install zip
	zip -r kafka_msk_demo.zip *
	

Refernce Links : (open in youtube)
	1. Creating a Serverless Apache Kafka(MSK) publisher using AWS Lambda
	2. Spring Boot Kafka Producer & Consumer Example with REST Client & Kafka Server in Amazon EC2 Instance
	3. https://docs.aws.amazon.com/lambda/latest/dg/python-handler.html
	4. Installation of PIP on ec2
		https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-proxy-with-ssm-agent-al-python-requests.html
	
	